{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { DEFAULT_MODE_STORAGE_KEY, DEFAULT_COLOR_SCHEME_STORAGE_KEY } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nexport function getSystemMode(mode) {\n  if (typeof window !== 'undefined' && typeof window.matchMedia === 'function' && mode === 'system') {\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n\n    if (mql.matches) {\n      return 'dark';\n    }\n\n    return 'light';\n  }\n\n  return undefined;\n}\n\nfunction processState(state, callback) {\n  if (state.mode === 'light' || state.mode === 'system' && state.systemMode === 'light') {\n    return callback('light');\n  }\n\n  if (state.mode === 'dark' || state.mode === 'system' && state.systemMode === 'dark') {\n    return callback('dark');\n  }\n\n  return undefined;\n}\n\nexport function getColorScheme(state) {\n  return processState(state, mode => {\n    if (mode === 'light') {\n      return state.lightColorScheme;\n    }\n\n    if (mode === 'dark') {\n      return state.darkColorScheme;\n    }\n\n    return undefined;\n  });\n}\n\nfunction initializeValue(key, defaultValue) {\n  if (typeof window === 'undefined') {\n    return undefined;\n  }\n\n  let value;\n\n  try {\n    value = localStorage.getItem(key) || undefined;\n\n    if (!value) {\n      // the first time that user enters the site.\n      localStorage.setItem(key, defaultValue);\n    }\n  } catch {// Unsupported\n  }\n\n  return value || defaultValue;\n}\n\nexport default function useCurrentColorScheme(options) {\n  const {\n    defaultMode = 'light',\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    supportedColorSchemes = [],\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    storageWindow = typeof window === 'undefined' ? undefined : window,\n    noSsr = false\n  } = options;\n  const joinedColorSchemes = supportedColorSchemes.join(',');\n  const isMultiSchemes = supportedColorSchemes.length > 1;\n  const [state, setState] = React.useState(() => {\n    const initialMode = initializeValue(modeStorageKey, defaultMode);\n    const lightColorScheme = initializeValue(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);\n    const darkColorScheme = initializeValue(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);\n    return {\n      mode: initialMode,\n      systemMode: getSystemMode(initialMode),\n      lightColorScheme,\n      darkColorScheme\n    };\n  });\n  const [isClient, setIsClient] = React.useState(noSsr || !isMultiSchemes);\n  React.useEffect(() => {\n    setIsClient(true); // to rerender the component after hydration\n  }, []);\n  const colorScheme = getColorScheme(state);\n  const setMode = React.useCallback(mode => {\n    setState(currentState => {\n      if (mode === currentState.mode) {\n        // do nothing if mode does not change\n        return currentState;\n      }\n\n      const newMode = mode ?? defaultMode;\n\n      try {\n        localStorage.setItem(modeStorageKey, newMode);\n      } catch {// Unsupported\n      }\n\n      return { ...currentState,\n        mode: newMode,\n        systemMode: getSystemMode(newMode)\n      };\n    });\n  }, [modeStorageKey, defaultMode]);\n  const setColorScheme = React.useCallback(value => {\n    if (!value) {\n      setState(currentState => {\n        try {\n          localStorage.setItem(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);\n          localStorage.setItem(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);\n        } catch {// Unsupported\n        }\n\n        return { ...currentState,\n          lightColorScheme: defaultLightColorScheme,\n          darkColorScheme: defaultDarkColorScheme\n        };\n      });\n    } else if (typeof value === 'string') {\n      if (value && !joinedColorSchemes.includes(value)) {\n        console.error(`\\`${value}\\` does not exist in \\`theme.colorSchemes\\`.`);\n      } else {\n        setState(currentState => {\n          const newState = { ...currentState\n          };\n          processState(currentState, mode => {\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-${mode}`, value);\n            } catch {// Unsupported\n            }\n\n            if (mode === 'light') {\n              newState.lightColorScheme = value;\n            }\n\n            if (mode === 'dark') {\n              newState.darkColorScheme = value;\n            }\n          });\n          return newState;\n        });\n      }\n    } else {\n      setState(currentState => {\n        const newState = { ...currentState\n        };\n        const newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;\n        const newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;\n\n        if (newLightColorScheme) {\n          if (!joinedColorSchemes.includes(newLightColorScheme)) {\n            console.error(`\\`${newLightColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n          } else {\n            newState.lightColorScheme = newLightColorScheme;\n\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-light`, newLightColorScheme);\n            } catch (error) {// Unsupported\n            }\n          }\n        }\n\n        if (newDarkColorScheme) {\n          if (!joinedColorSchemes.includes(newDarkColorScheme)) {\n            console.error(`\\`${newDarkColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n          } else {\n            newState.darkColorScheme = newDarkColorScheme;\n\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-dark`, newDarkColorScheme);\n            } catch (error) {// Unsupported\n            }\n          }\n        }\n\n        return newState;\n      });\n    }\n  }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]);\n  const handleMediaQuery = React.useCallback(event => {\n    if (state.mode === 'system') {\n      setState(currentState => {\n        const systemMode = event?.matches ? 'dark' : 'light'; // Early exit, nothing changed.\n\n        if (currentState.systemMode === systemMode) {\n          return currentState;\n        }\n\n        return { ...currentState,\n          systemMode\n        };\n      });\n    }\n  }, [state.mode]); // Ref hack to avoid adding handleMediaQuery as a dep\n\n  const mediaListener = React.useRef(handleMediaQuery);\n  mediaListener.current = handleMediaQuery;\n  React.useEffect(() => {\n    if (typeof window.matchMedia !== 'function' || !isMultiSchemes) {\n      return undefined;\n    }\n\n    const handler = function () {\n      return mediaListener.current(...arguments);\n    }; // Always listen to System preference\n\n\n    const media = window.matchMedia('(prefers-color-scheme: dark)'); // Intentionally use deprecated listener methods to support iOS & old browsers\n\n    media.addListener(handler);\n    handler(media);\n    return () => {\n      media.removeListener(handler);\n    };\n  }, [isMultiSchemes]); // Handle when localStorage has changed\n\n  React.useEffect(() => {\n    if (storageWindow && isMultiSchemes) {\n      const handleStorage = event => {\n        const value = event.newValue;\n\n        if (typeof event.key === 'string' && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {\n          // If the key is deleted, value will be null then reset color scheme to the default one.\n          if (event.key.endsWith('light')) {\n            setColorScheme({\n              light: value\n            });\n          }\n\n          if (event.key.endsWith('dark')) {\n            setColorScheme({\n              dark: value\n            });\n          }\n        }\n\n        if (event.key === modeStorageKey && (!value || ['light', 'dark', 'system'].includes(value))) {\n          setMode(value || defaultMode);\n        }\n      }; // For syncing color-scheme changes between iframes\n\n\n      storageWindow.addEventListener('storage', handleStorage);\n      return () => {\n        storageWindow.removeEventListener('storage', handleStorage);\n      };\n    }\n\n    return undefined;\n  }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow, isMultiSchemes]);\n  return { ...state,\n    mode: isClient ? state.mode : undefined,\n    systemMode: isClient ? state.systemMode : undefined,\n    colorScheme: isClient ? colorScheme : undefined,\n    setMode,\n    setColorScheme\n  };\n}","map":{"version":3,"names":["React","DEFAULT_MODE_STORAGE_KEY","DEFAULT_COLOR_SCHEME_STORAGE_KEY","getSystemMode","mode","window","matchMedia","mql","matches","undefined","processState","state","callback","systemMode","getColorScheme","lightColorScheme","darkColorScheme","initializeValue","key","defaultValue","value","localStorage","getItem","setItem","useCurrentColorScheme","options","defaultMode","defaultLightColorScheme","defaultDarkColorScheme","supportedColorSchemes","modeStorageKey","colorSchemeStorageKey","storageWindow","noSsr","joinedColorSchemes","join","isMultiSchemes","length","setState","useState","initialMode","isClient","setIsClient","useEffect","colorScheme","setMode","useCallback","currentState","newMode","setColorScheme","includes","console","error","newState","newLightColorScheme","light","newDarkColorScheme","dark","handleMediaQuery","event","mediaListener","useRef","current","handler","media","addListener","removeListener","handleStorage","newValue","startsWith","match","endsWith","addEventListener","removeEventListener"],"sources":["D:/base-react-redux/node_modules/@mui/system/esm/cssVars/useCurrentColorScheme.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { DEFAULT_MODE_STORAGE_KEY, DEFAULT_COLOR_SCHEME_STORAGE_KEY } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nexport function getSystemMode(mode) {\n  if (typeof window !== 'undefined' && typeof window.matchMedia === 'function' && mode === 'system') {\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n    if (mql.matches) {\n      return 'dark';\n    }\n    return 'light';\n  }\n  return undefined;\n}\nfunction processState(state, callback) {\n  if (state.mode === 'light' || state.mode === 'system' && state.systemMode === 'light') {\n    return callback('light');\n  }\n  if (state.mode === 'dark' || state.mode === 'system' && state.systemMode === 'dark') {\n    return callback('dark');\n  }\n  return undefined;\n}\nexport function getColorScheme(state) {\n  return processState(state, mode => {\n    if (mode === 'light') {\n      return state.lightColorScheme;\n    }\n    if (mode === 'dark') {\n      return state.darkColorScheme;\n    }\n    return undefined;\n  });\n}\nfunction initializeValue(key, defaultValue) {\n  if (typeof window === 'undefined') {\n    return undefined;\n  }\n  let value;\n  try {\n    value = localStorage.getItem(key) || undefined;\n    if (!value) {\n      // the first time that user enters the site.\n      localStorage.setItem(key, defaultValue);\n    }\n  } catch {\n    // Unsupported\n  }\n  return value || defaultValue;\n}\nexport default function useCurrentColorScheme(options) {\n  const {\n    defaultMode = 'light',\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    supportedColorSchemes = [],\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    storageWindow = typeof window === 'undefined' ? undefined : window,\n    noSsr = false\n  } = options;\n  const joinedColorSchemes = supportedColorSchemes.join(',');\n  const isMultiSchemes = supportedColorSchemes.length > 1;\n  const [state, setState] = React.useState(() => {\n    const initialMode = initializeValue(modeStorageKey, defaultMode);\n    const lightColorScheme = initializeValue(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);\n    const darkColorScheme = initializeValue(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);\n    return {\n      mode: initialMode,\n      systemMode: getSystemMode(initialMode),\n      lightColorScheme,\n      darkColorScheme\n    };\n  });\n  const [isClient, setIsClient] = React.useState(noSsr || !isMultiSchemes);\n  React.useEffect(() => {\n    setIsClient(true); // to rerender the component after hydration\n  }, []);\n  const colorScheme = getColorScheme(state);\n  const setMode = React.useCallback(mode => {\n    setState(currentState => {\n      if (mode === currentState.mode) {\n        // do nothing if mode does not change\n        return currentState;\n      }\n      const newMode = mode ?? defaultMode;\n      try {\n        localStorage.setItem(modeStorageKey, newMode);\n      } catch {\n        // Unsupported\n      }\n      return {\n        ...currentState,\n        mode: newMode,\n        systemMode: getSystemMode(newMode)\n      };\n    });\n  }, [modeStorageKey, defaultMode]);\n  const setColorScheme = React.useCallback(value => {\n    if (!value) {\n      setState(currentState => {\n        try {\n          localStorage.setItem(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);\n          localStorage.setItem(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);\n        } catch {\n          // Unsupported\n        }\n        return {\n          ...currentState,\n          lightColorScheme: defaultLightColorScheme,\n          darkColorScheme: defaultDarkColorScheme\n        };\n      });\n    } else if (typeof value === 'string') {\n      if (value && !joinedColorSchemes.includes(value)) {\n        console.error(`\\`${value}\\` does not exist in \\`theme.colorSchemes\\`.`);\n      } else {\n        setState(currentState => {\n          const newState = {\n            ...currentState\n          };\n          processState(currentState, mode => {\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-${mode}`, value);\n            } catch {\n              // Unsupported\n            }\n            if (mode === 'light') {\n              newState.lightColorScheme = value;\n            }\n            if (mode === 'dark') {\n              newState.darkColorScheme = value;\n            }\n          });\n          return newState;\n        });\n      }\n    } else {\n      setState(currentState => {\n        const newState = {\n          ...currentState\n        };\n        const newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;\n        const newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;\n        if (newLightColorScheme) {\n          if (!joinedColorSchemes.includes(newLightColorScheme)) {\n            console.error(`\\`${newLightColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n          } else {\n            newState.lightColorScheme = newLightColorScheme;\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-light`, newLightColorScheme);\n            } catch (error) {\n              // Unsupported\n            }\n          }\n        }\n        if (newDarkColorScheme) {\n          if (!joinedColorSchemes.includes(newDarkColorScheme)) {\n            console.error(`\\`${newDarkColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n          } else {\n            newState.darkColorScheme = newDarkColorScheme;\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-dark`, newDarkColorScheme);\n            } catch (error) {\n              // Unsupported\n            }\n          }\n        }\n        return newState;\n      });\n    }\n  }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]);\n  const handleMediaQuery = React.useCallback(event => {\n    if (state.mode === 'system') {\n      setState(currentState => {\n        const systemMode = event?.matches ? 'dark' : 'light';\n\n        // Early exit, nothing changed.\n        if (currentState.systemMode === systemMode) {\n          return currentState;\n        }\n        return {\n          ...currentState,\n          systemMode\n        };\n      });\n    }\n  }, [state.mode]);\n\n  // Ref hack to avoid adding handleMediaQuery as a dep\n  const mediaListener = React.useRef(handleMediaQuery);\n  mediaListener.current = handleMediaQuery;\n  React.useEffect(() => {\n    if (typeof window.matchMedia !== 'function' || !isMultiSchemes) {\n      return undefined;\n    }\n    const handler = (...args) => mediaListener.current(...args);\n\n    // Always listen to System preference\n    const media = window.matchMedia('(prefers-color-scheme: dark)');\n\n    // Intentionally use deprecated listener methods to support iOS & old browsers\n    media.addListener(handler);\n    handler(media);\n    return () => {\n      media.removeListener(handler);\n    };\n  }, [isMultiSchemes]);\n\n  // Handle when localStorage has changed\n  React.useEffect(() => {\n    if (storageWindow && isMultiSchemes) {\n      const handleStorage = event => {\n        const value = event.newValue;\n        if (typeof event.key === 'string' && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {\n          // If the key is deleted, value will be null then reset color scheme to the default one.\n          if (event.key.endsWith('light')) {\n            setColorScheme({\n              light: value\n            });\n          }\n          if (event.key.endsWith('dark')) {\n            setColorScheme({\n              dark: value\n            });\n          }\n        }\n        if (event.key === modeStorageKey && (!value || ['light', 'dark', 'system'].includes(value))) {\n          setMode(value || defaultMode);\n        }\n      };\n      // For syncing color-scheme changes between iframes\n      storageWindow.addEventListener('storage', handleStorage);\n      return () => {\n        storageWindow.removeEventListener('storage', handleStorage);\n      };\n    }\n    return undefined;\n  }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow, isMultiSchemes]);\n  return {\n    ...state,\n    mode: isClient ? state.mode : undefined,\n    systemMode: isClient ? state.systemMode : undefined,\n    colorScheme: isClient ? colorScheme : undefined,\n    setMode,\n    setColorScheme\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}